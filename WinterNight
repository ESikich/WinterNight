int WIDTH = -1;
int HEIGHT = -1;
int NUM_SNOWFLAKES = -1;
int NUM_CARS = -1;

int NUM_SMALL_BUILDINGS = -1;
int NUM_SMALL_BUILDINGS_WIDTH = -1;
int NUM_SMALL_BUILDINGS_FLOORS = -1;

int NUM_MEDIUM_BUILDINGS = -1;
int NUM_MEDIUM_BUILDINGS_WIDTH = -1;
int NUM_MEDIUM_BUILDINGS_FLOORS = -1;

int NUM_LARGE_BUILDINGS = -1;
int NUM_LARGE_BUILDINGS_WIDTH = -1;
int NUM_LARGE_BUILDINGS_FLOORS = -1;

int NUM_STARS = -1;
float MOON_X = -1;
float MOON_Y = -1;
int WIND_SPEED = -1;
float LIGHTS_ON = -1;

ArrayList<SnowFlake> snowFlake = new ArrayList<SnowFlake>();
ArrayList<Car> car = new ArrayList<Car>();
ArrayList<Building> smallBuilding = new ArrayList<Building>();
ArrayList<Building> mediumBuilding = new ArrayList<Building>();
ArrayList<Building> largeBuilding = new ArrayList<Building>();
ArrayList<Star> star = new ArrayList<Star>();

float mouse;

void mousePressed() {
	setup();
}

class Antenna{
	float xPosition;
	boolean hasLight;
	boolean isBlinking;
	int speed;
	float dutyCycle;
	int tick;
	
	Antenna(float xPositionTemp, boolean hasLightTemp, boolean isBlinkingTemp, int speedTemp, float dutyCycleTemp, int tickTemp){
		xPosition = xPositionTemp;
		hasLight = hasLightTemp;
		isBlinking = isBlinkingTemp;
		speed = speedTemp;
		dutyCycle = dutyCycleTemp;
		tick = tickTemp;
	}
}

class SnowFlake{
	float x;
	float y;
	float diameter;
	
	SnowFlake(){
		x = random(1, width);
		y = random(0, height);
		diameter = random(.5, 5);
	}
	
	void update(){
		y = y + diameter / 4;
		if (y >= height){
			y = 0;
			diameter = random(.5, 5);
		}
		
		x = x + diameter / WIND_SPEED;

		if(x > width){
			x = 0;
		}

		fill(255, 230);
		ellipse(x, y, diameter, diameter);
	}
}

class Car{
	float x;
	float speed;
	int direction;
	
	Car(float xTemp, float speedTemp){
		x = xTemp;
		speed = speedTemp;
		int d = int(random(2));
		if(d > 0){
			direction = 1;
		}else{
			direction = -1;
		}
	}
	
	void update(){
		x = x + (speed * direction);
		if(direction > 0){
			if(x >= width){
				if(int(random(2)) > 0){
					x = 0;
					direction = 1;
				}else{
					x = width;
					direction = -1;
				}
				
			}
		}else{
			if(x + 30 < 0){
				if(int(random(2)) > 0){
					x = 0;
					direction = 1;
				}else{
					x = width;
					direction = -1;
				}
			}
		}
		
		fill(0, 255);
		rect(x, 440, 30, 10);
		/*
		fill(#ffff77, 100 - mouse);
		quad(x+30, 445, x+30, 445, x + 100, 450, x + 100, 440);*/
	}
}

class Building{
	int floors;
	int bWidth;
	int xCoord;
	int numAntenna;
	int wWidth;
	float[][] lights;
	Antenna[] antenna;

	void initAntenna(){
		numAntenna = int(random(3));
		antenna = new Antenna[numAntenna];
		
		for(int i = 0; i < numAntenna; i++){
			//antenna[i] = (((bWidth * 2 + 1) + 20) / (numAntenna + 1));   
		}
	}

	void init(){
		for(int y = 0; y < floors; y++){

			for(int x = 0; x < bWidth; x++){
				if(random(1) > (LIGHTS_ON)){
					lights[x][y] = -1;
				}else{
					lights[x][y] = random(1);
				}
			}
		}
	}
	
	void draw(){
		stroke(1, 100);
		drawBuildings();
		drawWindows();
		noStroke();
	}
	
	void drawAntennas(){
		
	}
	
	void drawBuildings(){
		fill(mouse * 0.5, 15, 35);
		rect(xCoord, height - ((floors * 2 + 1) * wWidth), ((bWidth * 2 + 1) * wWidth), ((floors * 2 + 1) * wWidth));
	}
	
	void drawWindows(){
		fill(#ffff77, 255 - mouse);
		for(int x = 0; x < bWidth; x++){
			for(int y = 0; y < floors; y++){
				if(lights[x][y] > mouse / 255){
					int xCorner = xCoord + (wWidth * x * 2 + wWidth);
					int yCorner = height - (wWidth * y * 2 + wWidth * 2);
					rect(xCorner, yCorner, wWidth, wWidth);
				}
			}
		}
	}

	Building(int wWidthTemp, int floorsTemp, int bWidthTemp, int xCoordTemp){
		wWidth = wWidthTemp;
		floors = floorsTemp;
		bWidth = bWidthTemp;
		xCoord = xCoordTemp /** wWidth*/;
		lights = new float[bWidth][floors];
	}
}

class Star{
	int x;
	int y;
	float brightness;
	
	void draw(){
		fill(255 * brightness, 255 - mouse);
		ellipse(x, y, 1, 1);
	}
	
	Star(int xTemp, int yTemp, float brightnessTemp){
		x = xTemp;
		y = yTemp;
		brightness = brightnessTemp;
	}
}

void getMouse(){
	MOON_X = map(mouseX, 0, width, 0, width);
	MOON_Y = map(mouseY, 0, height, 0, height);
	mouse = map(mouseY, 0, height, 0, 255);  		
}

void drawStars(){
	for(Star s: star){
		s.draw();
	}
}

void drawMoon(){
	float coef = 1;//mouse / 255;
	fill(#f5f3ce, 10);
	ellipse(MOON_X, MOON_Y * coef, 120, 120);
	ellipse(MOON_X, MOON_Y * coef, 140, 140);
	ellipse(MOON_X, MOON_Y * coef, 160, 160);
	fill(#f5f3ce, 180);
	ellipse(MOON_X, MOON_Y * coef, 100, 100);
}

void drawBuildings(){
	for(Building s : smallBuilding){
		s.draw();
	}
	
	for(Building m : mediumBuilding){
		m.draw();
	}
	
	for(Building l : largeBuilding){
		l.draw();
	}
}

void drawGround(){
	fill(200, 250, 250);
	rect(0, 500, 600, 200);

	fill(0);
	ellipse(0, 500, 200, 100);
	ellipse(0, 500, 300, 50);
	ellipse(300, 500, 70, 20);
	ellipse(500, 500, 100, 40);
	ellipse(450, 500, 100, 20);
	ellipse(300, 500, 70, 20);
	ellipse(580, 490, 170, 100);
}

void drawCar(){
	for(Car c : car){
		c.update();
	}
}

void drawBridge(){
	//BRIDGE
	fill(225);
	rect(0, 428/600 * height, width, 2);
	fill(0);
	quad(width / 2 + 5/6 * width, height / 2 + 150/600 * height, width / 2 + 576/600 * width, height / 2 + 170/600 * height, width / 2 - 586/600 * width, height / 2 + 170/600 * height, width / 2 - 560/600 * width, height / 2 + 150/600 * height);
	
	for(int i = 0; i < int((width) / (40/600*width)); i++){
		rect(i * 40/600*width, 430/600 * height, 5, 20/600 * height);
	}
	
	rect(0, 430, 600, 5);

	//BRIDGE SHADOW
	fill(0, 50);
	rect(0, 505/600*height, width, 10/600*height);

	//REFLECTION
	fill(100, 150);
	rect(0, 500/600*height, width, 200/600 *height);
}

void drawSnow(){
	fill(255);
	ellipse(100, 630, 400, 100);
	ellipse(0, 600, 350, 100);
	fill(255, 150);
	ellipse(370, 500, 100, 1);
	ellipse(570, 510, 100, 1);
	ellipse(140, 500, 100, 1);
	ellipse(360, 550, 100, 3);
	ellipse(400, 560, 50, 1);
	ellipse(150, 530, 50, 1);
}

void drawSnowFlakes(){
	for(SnowFlake s : snowFlake){
		s.update();
	}
}

void overlay(){
	fill(mouse * .7, 30, 65, 100);
	rect(0, 0, width, height);
}

void initVars(){
	WIDTH = 600;
	HEIGHT = 600;
	NUM_SNOWFLAKES = int(random(50, 500));
	NUM_CARS = int(random(2, 10));

	NUM_SMALL_BUILDINGS = int(random(6, 8));
	NUM_SMALL_BUILDINGS_WIDTH = int(random(6, 8));
	NUM_SMALL_BUILDINGS_FLOORS = int(random(30, 60));

	NUM_MEDIUM_BUILDINGS = int(random(4, 8));
	NUM_MEDIUM_BUILDINGS_WIDTH = int(random(4, 6));
	NUM_MEDIUM_BUILDINGS_FLOORS = int(random(4, 8));

	NUM_LARGE_BUILDINGS = int(random(1, 2));
	NUM_LARGE_BUILDINGS_WIDTH = int(random(3, 4));
	NUM_LARGE_BUILDINGS_FLOORS = int(random(4, 6));

	NUM_STARS = int(random(100, 150));
	
	MOON_X = 0;
	MOON_Y = 0;
	
	WIND_SPEED = int(random(1, 100));
	
	LIGHTS_ON = .60;
}

void initSketch(){
	size(WIDTH, HEIGHT);	
	background(0);
	noStroke();
}

void initSnowflakes(){
    snowFlake.clear();
	for(int i = 0; i < NUM_SNOWFLAKES; i++){
		snowFlake.add(new SnowFlake());
	}
}

void initCars(){
    car.clear();
	for(int i = 0; i < NUM_CARS; i++){
		car.add(new Car(random(1, width), random(1, 2)));
	}
}

void initBuildings(){
	int wWidth = 5;
	smallBuilding.clear();
	for(int i = 0; i < NUM_SMALL_BUILDINGS; i++){
		smallBuilding.add(new Building(wWidth, int(random(30, 60)), int(random(6, 12)), int(random(width/*width / wWidth*/))));
		smallBuilding.get(i).init();
	}
	
	wWidth = 10;
	mediumBuilding.clear();
	for(int i = 0; i < NUM_MEDIUM_BUILDINGS; i++){
		mediumBuilding.add(new Building(wWidth, int(random(8, 20)), int(random(3, 6)), int(random(width /*/ wWidth*/))));
		mediumBuilding.get(i).init();
	}
	
	wWidth = 20;
	largeBuilding.clear();
	for(int i = 0; i < NUM_LARGE_BUILDINGS; i++){
		largeBuilding.add(new Building(wWidth, int(random(1, 5)), int(random(2, 4)), int(random(width /*/ wWidth*/))));
		largeBuilding.get(i).init();
	}	
}

void initStars(){
    star.clear();
	for(int i = 0; i < NUM_STARS; i++){
		star.add(new Star(int(random(width)), int(random(height)), random(0.5, 1)));
	}
}

void initMoon(){
	MOON_X = int(random(width));
	MOON_Y = height;
}

void setup() {
	initVars();
	initSketch();	
	initSnowflakes();
	initCars();
	initBuildings();
	initStars();
	initMoon();
}

void draw() {
	getMouse();
	drawStars();
	drawMoon();
	drawBuildings();
	drawGround();
	drawCar();
	drawBridge();    
	drawSnow();
	overlay();
	drawSnowFlakes();
}
